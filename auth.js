// auth.js

// –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π Firebase Auth (Modular SDK)
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  onAuthStateChanged,
  signOut,
  updateProfile
} from "https://www.gstatic.com/firebasejs/11.10.0/firebase-auth.js";

// –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ profile.js
import { updateProfileDisplay } from './profile.js';

document.addEventListener("DOMContentLoaded", () => {
  const app = window.firebaseApp;
  const auth = window.auth;

  if (!app || !auth) {
    console.error("‚ùó Firebase App –∏–ª–∏ Auth –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ index.html");
    return;
  }

  // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
  const loginTab = document.getElementById('loginTab');
  const registerTab = document.getElementById('registerTab');
  const loginForm = document.getElementById('loginForm');
  const registerForm = document.getElementById('registerForm');
  const authContainer = document.querySelector('.auth-container');
  const profileInfoContainer = document.getElementById('profileInfoContainer');
  const logoutBtn = document.getElementById('logoutBtn');
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
  const openAdminPanelBtn = document.getElementById('openAdminPanel');

  const loginEmailInput = document.getElementById('loginEmail');
  const loginPasswordInput = document.getElementById('loginPassword');
  const loginError = document.getElementById('loginError');

  const registerEmailInput = document.getElementById('registerEmail');
  const registerNicknameInput = document.getElementById('registerNickname');
  const registerPasswordInput = document.getElementById('registerPassword');
  const registerError = document.getElementById('registerError');

  const requiredElements = [
    loginTab, registerTab, loginForm, registerForm, authContainer,
    profileInfoContainer, logoutBtn, loginEmailInput, loginPasswordInput,
    loginError, registerEmailInput, registerNicknameInput, registerPasswordInput,
    registerError, openAdminPanelBtn // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ–≤–µ—Ä–∫—É
  ];

  if (requiredElements.some(el => !el)) {
    console.error("‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ DOM —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è auth.js");
    return;
  }

  function showAuthForm(isRegister) {
    profileInfoContainer.style.display = 'none';
    loginTab.classList.toggle('active', !isRegister);
    registerTab.classList.toggle('active', isRegister);
    loginForm.style.display = isRegister ? 'none' : 'flex';
    registerForm.style.display = isRegister ? 'flex' : 'none';
    authContainer.classList.remove('transparent-bg');
    loginError.textContent = '';
    registerError.textContent = '';
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    openAdminPanelBtn.style.display = 'none';
  }

  loginTab.addEventListener('click', () => showAuthForm(false));
  registerTab.addEventListener('click', () => showAuthForm(true));

  // –õ–æ–≥–∏–Ω
  loginForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const email = loginEmailInput.value.trim();
    const password = loginPasswordInput.value;
    loginError.textContent = '';

    try {
      await signInWithEmailAndPassword(auth, email, password);
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É');
      loginEmailInput.value = '';
      loginPasswordInput.value = '';
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error.code);
      loginError.textContent = getAuthErrorMessage(error.code, 'login');
    }
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  registerForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const email = registerEmailInput.value.trim();
    const nickname = registerNicknameInput.value.trim();
    const password = registerPasswordInput.value;
    registerError.textContent = '';

    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      if (auth.currentUser && nickname) {
        await updateProfile(auth.currentUser, { displayName: nickname });
      }
      console.log('üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
      registerEmailInput.value = '';
      registerNicknameInput.value = '';
      registerPasswordInput.value = '';
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.code);
      registerError.textContent = getAuthErrorMessage(error.code, 'register');
    }
  });

  // –í—ã—Ö–æ–¥
  logoutBtn.addEventListener('click', async () => {
    try {
      await signOut(auth);
      console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error.message);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  onAuthStateChanged(auth, async (user) => {
    let isAdmin = false;
    if (user) {
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ email
      // –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –ü–†–û–°–¢–û–ô –ø—Ä–∏–º–µ—Ä. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Firebase Custom Claims.
      const adminEmails = ["ipagroove@gmail.com", "–¥—Ä—É–≥–æ–π_–∞–¥–º–∏–Ω@example.com"]; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ email-—ã
      if (adminEmails.includes(user.email)) {
        isAdmin = true;
      }
      // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Custom Claims, —Ç–æ –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç —Ç–∞–∫–æ–π:
      // try {
      //   const idTokenResult = await user.getIdTokenResult();
      //   isAdmin = idTokenResult.claims.admin === true;
      // } catch (error) {
      //   console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç–æ–∫–µ–Ω–∞:", error);
      // }
    } else {
      console.log('üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }
    // –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    updateProfileDisplay(user, isAdmin);
  });

  function getAuthErrorMessage(code, mode) {
    switch (code) {
      case 'auth/invalid-email':
        return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.';
      case 'auth/user-disabled':
        return '–ê–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω.';
      case 'auth/user-not-found':
      case 'auth/wrong-password':
      case 'auth/invalid-credential':
        return mode === 'login' ? '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.' : '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.';
      case 'auth/email-already-in-use':
        return 'Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.';
      case 'auth/weak-password':
        return '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.';
      case 'auth/too-many-requests':
        return '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      default:
        return `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (${code}).`;
    }
  }
});
