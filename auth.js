// auth.js

// ========== –ò–ú–ü–û–†–¢–´ –ò–ó FIREBASE SDK ==========
import {
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  onAuthStateChanged,
  signOut, // 'signOut' is imported but not used in the provided snippet. Keep it if needed elsewhere.
  updateProfile
} from "https://www.gstatic.com/firebasejs/11.10.0/firebase-auth.js";

// !!! –ò–ú–ü–û–†–¢ –§–£–ù–ö–¶–ò–ò –ò–ó –ù–û–í–û–ì–û profile.js !!!
import {
  updateProfileDisplay
} from './profile.js';

document.addEventListener("DOMContentLoaded", () => {
  const app = window.firebaseApp;
  if (!app) {
    console.error("Firebase App –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤ index.html. –§—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.");
    return;
  }
  const auth = getAuth(app);

  // –≠–ª–µ–º–µ–Ω—Ç—ã DOM –¥–ª—è —Ñ–æ—Ä–º –∏ —Å—Ç–∞—Ç—É—Å–∞
  const loginTab = document.getElementById('loginTab');
  const registerTab = document.getElementById('registerTab');
  const loginForm = document.getElementById('loginForm');
  const registerForm = document.getElementById('registerForm');
  const authContainer = document.querySelector('.auth-container');
  const profileInfoContainer = document.getElementById('profileInfoContainer');

  // –ü–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞
  const loginEmailInput = document.getElementById('loginEmail');
  const loginPasswordInput = document.getElementById('loginPassword');
  const loginError = document.getElementById('loginError');

  // –ü–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const registerEmailInput = document.getElementById('registerEmail');
  const registerNicknameInput = document.getElementById('registerNickname');
  const registerPasswordInput = document.getElementById('registerPassword');
  const registerError = document.getElementById('registerError');

  // --- –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ) ---
  console.log('–≠–ª–µ–º–µ–Ω—Ç loginTab:', loginTab);
  console.log('–≠–ª–µ–º–µ–Ω—Ç registerTab:', registerTab);
  console.log('–≠–ª–µ–º–µ–Ω—Ç loginForm:', loginForm);
  console.log('–≠–ª–µ–º–µ–Ω—Ç registerForm:', registerForm);
  console.log('–≠–ª–µ–º–µ–Ω—Ç authContainer:', authContainer);
  console.log('–≠–ª–µ–º–µ–Ω—Ç profileInfoContainer:', profileInfoContainer);
  // --- –ö–æ–Ω–µ—Ü –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –ª–æ–≥–æ–≤ ---

  /**
   * @function showAuthForm
   * @description Handles the display of authentication forms (login/register) and related UI elements.
   * @param {boolean} isRegister - If true, shows the registration form; otherwise, shows the login form.
   */
  function showAuthForm(isRegister) {
    // Ensure both forms exist before manipulating
    if (!loginForm || !registerForm || !loginTab || !registerTab || !authContainer || !profileInfoContainer) {
      console.error("One or more required DOM elements for authentication forms are missing.");
      return;
    }

    // Hide profile container when showing auth forms
    profileInfoContainer.style.display = 'none';

    // Toggle active classes for tabs and forms
    loginTab.classList.toggle('active', !isRegister);
    registerTab.classList.toggle('active', isRegister);
    loginForm.classList.toggle('active', !isRegister);
    registerForm.classList.toggle('active', isRegister);

    // Set display style for forms
    loginForm.style.display = isRegister ? 'none' : 'flex';
    registerForm.style.display = isRegister ? 'flex' : 'none';

    // Make auth-container background non-transparent when showing forms
    authContainer.classList.remove('transparent-bg');

    // Show tabs
    loginTab.style.display = 'block';
    registerTab.style.display = 'block';

    // Clear any previous error messages
    loginError.textContent = '';
    registerError.textContent = '';
  }

  // Event listeners for tab switching
  loginTab.addEventListener('click', () => {
    showAuthForm(false); // Show login form
  });

  registerTab.addEventListener('click', () => {
    showAuthForm(true); // Show registration form
  });

  // Event listener for LOGIN form submission
  loginForm.addEventListener('submit', async (event) => {
    event.preventDefault(); // Prevent default form submission
    const email = loginEmailInput.value.trim();
    const password = loginPasswordInput.value;
    loginError.textContent = ''; // Clear previous error

    try {
      await signInWithEmailAndPassword(auth, email, password);
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª!');
      // onAuthStateChanged will handle UI updates upon successful login
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error.code, error.message);
      let errorMessage = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      switch (error.code) {
        case 'auth/invalid-email':
          errorMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å.';
          break;
        case 'auth/user-disabled':
          errorMessage = '–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.';
          break;
        case 'auth/user-not-found':
        case 'auth/wrong-password':
        case 'auth/invalid-credential': // Modern Firebase error for incorrect email/password
          errorMessage = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.';
          break;
        case 'auth/too-many-requests':
          errorMessage = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
          break;
        default:
          errorMessage = `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`;
          break;
      }
      loginError.textContent = errorMessage;
    }
  });

  // Event listener for REGISTRATION form submission
  registerForm.addEventListener('submit', async (event) => {
    event.preventDefault(); // Prevent default form submission
    const email = registerEmailInput.value.trim();
    const nickname = registerNicknameInput.value.trim();
    const password = registerPasswordInput.value;
    registerError.textContent = ''; // Clear previous error

    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      // Update user profile with nickname if provided
      if (auth.currentUser && nickname) {
        await updateProfile(auth.currentUser, {
          displayName: nickname
        });
      }
      console.log('üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!');
      // onAuthStateChanged will handle UI updates upon successful registration
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.code, error.message);
      let errorMessage = '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      switch (error.code) {
        case 'auth/email-already-in-use':
          errorMessage = '–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π email.';
          break;
        case 'auth/invalid-email':
          errorMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å.';
          break;
        case 'auth/weak-password':
          errorMessage = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.';
          break;
        default:
          errorMessage = `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`;
          break;
      }
      registerError.textContent = errorMessage;
    }
  });

  // Observing authentication state changes (login/logout)
  onAuthStateChanged(auth, (user) => {
    // Call the function from profile.js to update profile display
    updateProfileDisplay(user);

    if (user) {
      // User is signed in
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É:', user.email, user.displayName);

      // Hide auth forms and tabs
      if (loginForm) loginForm.style.display = 'none';
      if (registerForm) registerForm.style.display = 'none';
      if (loginTab) loginTab.style.display = 'none';
      if (registerTab) registerTab.style.display = 'none';

      // Make auth-container background transparent when logged in
      if (authContainer) {
        authContainer.classList.add('transparent-bg');
      }

      // Ensure profile container is visible
      if (profileInfoContainer) {
        profileInfoContainer.style.display = 'flex';
      }

    } else {
      // User is signed out
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã.');
      // Show auth forms and tabs (default to login form)
      showAuthForm(false);
      // showAuthForm already handles removing 'transparent-bg' and hiding 'profileInfoContainer'
    }
  });
});
